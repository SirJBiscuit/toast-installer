#!/bin/bash
#
# PteroMenu v2.6.0 (Workaround Version)

VERSION="2.6.0"
CONFIG_FILE="/etc/pteromenu.conf"
DOCKER_CMD="/usr/bin/docker"

# Source config file
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"

# --- Cleanup function ---
cleanup() { rm -f /tmp/pteromenu_*; }
trap cleanup EXIT

# --- Function: Docker Management (Workaround) ---
show_docker_menu() {
    ensure_sudo || return
    while true; do
        choice=$(dialog --stdout --title "Docker Management" --menu "Select a tool:" 15 60 4 \
            1 "List Running Containers" \
            2 "View Container Logs" \
            3 "Clean Up Docker System" \
            4 "Back")
        [ $? -ne 0 ] && break
        case "$choice" in
            1)
                local container_info
                container_info=$(sudo $DOCKER_CMD ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}")
                if [ -z "$container_info" ]; then
                    dialog --title "Notice" --msgbox "No running containers found." 8 50; continue
                fi
                dialog --title "Running Containers" --msgbox "$container_info" 22 110
                ;;
            2)
                local container_names
                mapfile -t container_names < <(sudo $DOCKER_CMD ps --format "{{.Names}}")
                if [ ${#container_names[@]} -eq 0 ]; then
                    dialog --title "Notice" --msgbox "No running containers found." 8 50; continue
                fi
                
                local menu_options=()
                for name in "${container_names[@]}"; do
                    menu_options+=("$name" "") # Tag and Item are the same
                done

                local selected_container
                selected_container=$(dialog --stdout --title "Select Container" --menu "Choose a container to view logs:" 20 70 15 "${menu_options[@]}")
                [ $? -ne 0 ] && continue
                
                local FIFO
                FIFO=$(mktemp -u /tmp/pteromenu_fifo.XXXXXX)
                mkfifo "$FIFO"
                
                sudo $DOCKER_CMD logs --follow "$selected_container" > "$FIFO" 2>&1 &
                local DOCKER_PID=$!
                
                trap 'kill $DOCKER_PID &>/dev/null; rm -f "$FIFO"; trap - INT' INT
                dialog --title "Logs for $selected_container" --tailbox "$FIFO" 22 110
                kill "$DOCKER_PID" &>/dev/null; rm -f "$FIFO"; trap - INT
                ;;
            3)
                dialog --yesno "This will remove all unused Docker data. Continue?" 10 70 && {
                    clear; echo "--- Cleaning Up Docker System ---"; sudo $DOCKER_CMD system prune -af; echo "--- Docker System Pruned ---"; read -n 1 -s -r -p "Press any key to return...";
                }
                ;;
            4) break;;
        esac
    done
}

# --- Other functions (ensure_sudo, troubleshooting, etc.) are here ---
ensure_sudo() { if [ "$EUID" -ne 0 ]; then if ! sudo -n true 2>/dev/null; then dialog --title "Sudo Required" --msgbox "This action requires root privileges." 8 60; sudo -v; if [ $? -ne 0 ]; then dialog --title "Error" --msgbox "Sudo authentication failed." 8 50; return 1; fi; fi; fi; return 0; }
show_troubleshooting_menu() { ensure_sudo || return; local WINGS_LOG="/var/log/pterodactyl/wings.log"; local PANEL_LOG="/var/www/pterodactyl/storage/logs/laravel-$(date +%F).log"; local NGINX_LOG="/var/log/nginx/error.log"; while true; do local WINGS_STATUS="[OK]" && [ -f "$WINGS_LOG" ] && [ -s "$WINGS_LOG" ] && WINGS_STATUS="[ERRORS]"; local PANEL_STATUS="[OK]" && [ -f "$PANEL_LOG" ] && [ -s "$PANEL_LOG" ] && PANEL_STATUS="[FILE FOUND]"; local NGINX_STATUS="[OK]" && [ -f "$NGINX_LOG" ] && [ -s "$NGINX_LOG" ] && NGINX_STATUS="[ERRORS]"; choice=$(dialog --stdout --title "Troubleshooting & Logs" --menu "Select a tool:" 18 80 8 1 "Restart Services - The quickest fix" 2 "Fix Panel Permissions - The most common fix" 3 "Clear Panel Cache - Good for stubborn issues" " " "--- View Logs (Check status below) ---" 4 "View Wings Log (Game Servers)   $WINGS_STATUS" 5 "View Panel Log (Web Interface)  $PANEL_STATUS" 6 "View Nginx Error Log (Web Server) $NGINX_STATUS" 7 "Back"); [ $? -ne 0 ] && break; case "$choice" in 1) dialog --yesno "This restarts all core services. This is the quickest fix for general issues. Continue?" 8 70 && { clear; echo "--- Restarting Pterodactyl Services ---"; sudo systemctl restart pteroq wings nginx mariadb redis-server; echo "--- Services Restarted ---"; read -n 1 -s -r -p "Press any key to return..."; } ;; 2) dialog --yesno "This fixes web panel errors (like 500 errors) by resetting file ownership. This is the most common fix. Continue?" 8 70 && { clear; echo "--- Fixing Panel File Permissions ---"; sudo chown -R www-data:www-data /var/www/pterodactyl/*; echo "--- Permissions Fixed ---"; read -n 1 -s -r -p "Press any key to return..."; } ;; 3) dialog --yesno "This clears the panel cache. Good for stubborn issues where config changes won't apply. Continue?" 8 70 && { clear; echo "--- Clearing Panel Cache ---"; sudo -u www-data php /var/www/pterodactyl/artisan cache:clear && sudo -u www-data php /var/www/pterodactyl/artisan config:clear && sudo -u www-data php /var/www/pterodactyl/artisan view:clear; echo "--- Cache Cleared ---"; read -n 1 -s -r -p "Press any key to return..."; } ;; 4) if [ -f "$WINGS_LOG" ]; then dialog --title "Wings Log" --tailbox "$WINGS_LOG" 20 80; else dialog --title "Notice" --msgbox "Wings log file not found." 8 70; fi ;; 5) if [ -f "$PANEL_LOG" ]; then dialog --title "Panel Log" --tailbox "$PANEL_LOG" 20 80; else dialog --title "Notice" --msgbox "Panel log for today not found." 8 70; fi ;; 6) if [ -f "$NGINX_LOG" ] && [ -s "$NGINX_LOG" ]; then dialog --title "Nginx Error Log" --tailbox "$NGINX_LOG" 20 80; else dialog --title "Notice" --msgbox "No Nginx errors found. That's awesome!" 8 70; fi ;; 7) break;; esac; done; }
show_maintenance_menu() { ensure_sudo || return; while true; do choice=$(dialog --stdout --title "System Maintenance" --menu "Select an operation:" 15 60 4 1 "Update System Packages" 2 "Reboot / Shutdown" 3 "Back"); [ $? -ne 0 ] && break; case "$choice" in 1) clear; echo "--- Starting System Update ---"; sudo apt update && sudo apt upgrade -y; echo "--- System Update Finished ---"; read -n 1 -s -r -p "Press any key to return...";; 2) power_choice=$(dialog --stdout --title "Reboot / Shutdown" --menu "Are you sure?" 15 60 4 1 "Reboot Server" 2 "Shutdown Server" 3 "Cancel"); if [ "$power_choice" = "1" ]; then dialog --yesno "All services will be stopped. REBOOT?" 8 60 && sudo reboot; fi; if [ "$power_choice" = "2" ]; then dialog --yesno "All services will be stopped. SHUT DOWN?" 8 60 && sudo shutdown now; fi;; 3) break;; esac; done; }
show_system_info() { HOSTNAME=$(hostname); OS_INFO=$(grep PRETTY_NAME /etc/os-release | cut -d'=' -f2 | tr -d '"'); UPTIME=$(uptime -p); MEM_INFO=$(free -h | awk '/^Mem:/ {printf "%s / %s", $3, $2}'); DISK_INFO=$(df -h / | awk 'NR==2 {printf "%s / %s (%s)", $3, $2, $5}'); INFO_MSG="Hostname:    $HOSTNAME\nOS:          $OS_INFO\nUptime:      $UPTIME\n\nMemory:      $MEM_INFO\nDisk (/):    $DISK_INFO"; dialog --title "System Information" --msgbox "$INFO_MSG" 15 70; }
show_program_menu() { source "$CONFIG_FILE"; dialog_options=(); commands=(); for i in "${!PROGRAMS[@]}"; do if (( i % 2 == 0 )); then dialog_options+=("$((${#commands[@]} + 1))" "${PROGRAMS[i]}"); else commands+=("${PROGRAMS[i]}"); fi; done; if [ ${#commands[@]} -eq 0 ]; then dialog --title "Programs" --msgbox "No programs configured." 8 40; return; fi; choice=$(dialog --stdout --title "Program Launcher" --menu "Select:" 20 60 15 "${dialog_options[@]}"); [ $? -ne 0 ] && return; command_to_run="${commands[$((choice-1))]}"; clear; echo "Running: $command_to_run"; echo "---"; eval "$command_to_run"; echo "---"; read -n 1 -s -r -p "Press any key to return..."; }
show_settings_menu() { while true; do choice=$(dialog --stdout --title "Settings & Configs" --menu "" 15 50 4 1 "Service Manager" 2 "File Manager" 3 "Edit Config Files" 4 "Back"); [ $? -ne 0 ] && break; case "$choice" in 1) show_service_manager;; 2) show_file_manager;; 3) show_config_editor_menu;; 4) break;; esac; done; }
show_service_manager() { ensure_sudo || return; services=("nginx" "mariadb" "docker" "wings" "pteroq" "redis-server"); dialog_options=(); for service in "${services[@]}"; do status=$(systemctl is-active --quiet "$service" && echo "on" || echo "off"); dialog_options+=("$service" "" "$status"); done; choices=$(dialog --stdout --title "Service Manager" --checklist "Use SPACE to toggle:" 20 60 15 "${dialog_options[@]}"); [ $? -ne 0 ] && return; clear; echo "Applying changes..."; for service in "${services[@]}"; do if [[ $choices == *"$service"* ]]; then if ! systemctl is-active --quiet "$service"; then echo "Starting $service..."; sudo systemctl start "$service"; sudo systemctl enable "$service"; fi; else if systemctl is-active --quiet "$service"; then echo "Stopping $service..."; sudo systemctl stop "$service"; sudo systemctl disable "$service"; fi; fi; done; echo "Done."; read -n 1 -s -r -p "Press any key to return..."; }
show_file_manager() { ensure_sudo || return; while true; do choice=$(dialog --stdout --title "File Manager" --menu "" 15 50 4 1 "Add new file" 2 "Remove file" 3 "Rename file" 4 "Back"); [ $? -ne 0 ] && break; case "$choice" in 1) path=$(dialog --stdout --title "Add File" --inputbox "Enter full path:" 8 60); [ -n "$path" ] && { sudo touch "$path" && dialog --yesno "File created. Edit now?" 8 60 && sudo nano "$path"; };; 2) path=$(dialog --stdout --title "Remove File" --inputbox "Enter full path:" 8 60); [ -z "$path" ] && continue; [ ! -f "$path" ] && { dialog --title "Error" --msgbox "File not found." 8 60; continue; }; dialog --yesno "Permanently delete this file?\n$path" 10 60 && sudo rm "$path";; 3) old_path=$(dialog --stdout --title "Rename File" --inputbox "Enter current path:" 8 60); [ -z "$old_path" ] && continue; [ ! -f "$old_path" ] && { dialog --title "Error" --msgbox "File not found." 8 60; continue; }; new_path=$(dialog --stdout --title "Rename File" --inputbox "Enter new path:" 8 60 "$old_path"); [ -n "$new_path" ] && sudo mv "$old_path" "$new_path";; 4) break;; esac; done; }
show_config_editor_menu() { ensure_sudo || return; source "$CONFIG_FILE"; dialog_options=(); files_to_edit=(); for i in "${!CONFIG_FILES[@]}"; do if (( i % 2 == 0 )); then dialog_options+=("$((${#files_to_edit[@]} + 1))" "${CONFIG_FILES[i]}"); else files_to_edit+=("${CONFIG_FILES[i]}"); fi; done; if [ ${#files_to_edit[@]} -eq 0 ]; then dialog --title "Config Editor" --msgbox "No config files configured." 8 40; return; fi; choice=$(dialog --stdout --title "Config File Editor" --menu "Select a file to edit:" 20 60 15 "${dialog_options[@]}"); [ $? -ne 0 ] && return; file_to_edit="${files_to_edit[$((choice-1))]}"; clear; sudo nano "$file_to_edit"; }

# --- Main Loop ---
while true; do
    export DIALOGRC=/dev/null
    answer=$(dialog --stdout --title "PteroMenu v$VERSION" --menu "Select an option:" 18 55 8 \
        1 "Run a Program" \
        2 "System Information" \
        3 "Troubleshooting & Logs" \
        4 "Docker Management" \
        5 "System Maintenance" \
        6 "Settings & Configs" \
        7 "Help" \
        8 "Exit")
    [ $? -ne 0 ] && break
    case "$answer" in
        1) show_program_menu;; 2) show_system_info;; 3) show_troubleshooting_menu;;
        4) show_docker_menu;; 5) show_maintenance_menu;; 6) show_settings_menu;;
        7) dialog --title "Help" --msgbox "Welcome to PteroMenu!\n\n- Use ARROW KEYS and ENTER to navigate.\n- Press ESC to cancel or go back." 12 60;;
        8) break;;
    esac
done

clear
echo "Exiting PteroMenu. Goodbye!"
